[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is a sample blog pos"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "Hello this is the index\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPost With Code\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nJan 22, 2025\n\n\nHarlow Malloc\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\nJan 19, 2025\n\n\nTristan Oâ€™Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/hw0-post/penguins_analysis.html",
    "href": "posts/hw0-post/penguins_analysis.html",
    "title": "myblog",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\nimport plotly.express as px\nfrom sklearn.linear_model import LinearRegression\n\n\npenguins = pd.read_csv('palmer_penguins.csv')\npenguins[\"Species\"] = [penguins[\"Species\"][i].split()[0] for i in range(len(penguins[\"Species\"]))]\npenguins = penguins[[\"Species\", \"Island\", \"Culmen Length (mm)\", \"Culmen Depth (mm)\", \"Flipper Length (mm)\", \"Body Mass (g)\", \"Sex\"]]\npenguins = penguins.dropna()\npenguins = penguins[penguins[\"Sex\" ] != \".\"]\n\n\ngrouped_data_mass = penguins.groupby([\"Sex\", \"Species\"])[\"Body Mass (g)\"].aggregate(np.mean).unstack()\ngrouped_data_culmen_length = penguins.groupby([\"Sex\", \"Species\"])[\"Culmen Length (mm)\"].aggregate(np.mean).unstack()\ngrouped_data_culmen_depth = penguins.groupby([\"Sex\", \"Species\"])[\"Culmen Depth (mm)\"].aggregate(np.mean).unstack()\ngrouped_data_flipper_length = penguins.groupby([\"Sex\", \"Species\"])[\"Flipper Length (mm)\"].aggregate(np.mean).unstack()\npx.bar(grouped_data_mass, barmode='group', title='Average body mass of penguins by species and sex in grams').show()\npx.bar(grouped_data_culmen_length, barmode='group', title='Average culmen length of penguins by species and sex').show()\npx.bar(grouped_data_culmen_depth, barmode='group', title='Average culmen depth of penguins by species and sex').show()\npx.bar(grouped_data_flipper_length, barmode='group', title='Average flipper length of penguins by species and sex').show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nfig = px.scatter(penguins, x=\"Culmen Length (mm)\", y=\"Culmen Depth (mm)\", color=\"Species\", title=\"Culmen Length vs Culmen Depth\")\ndef regression_by_species(data, species):\n    data = data[data[\"Species\"] == species]\n    X = data[\"Culmen Length (mm)\"].values.reshape(-1, 1)\n    y = data[\"Culmen Depth (mm)\"].values.reshape(-1,1)\n    LR = LinearRegression()\n    LR.fit(X,y)\n    return LR.coef_, LR.intercept_\n\nx_range = np.linspace(penguins[\"Culmen Length (mm)\"].min(), penguins[\"Culmen Length (mm)\"].max(), 100)\ncolors = px.colors.qualitative.Plotly\nfor i, species in enumerate(penguins[\"Species\"].unique()):\n    coef, intercept = regression_by_species(penguins, species)\n    y_range = coef[0][0] * x_range + intercept[0]\n    fig.add_trace(px.line(x=x_range, y=y_range).data[0].update(line=dict(color=colors[i])), row=None, col=None)\n\n# Add the line of best fit to the plot\nfig.show()\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json\n\n\n\nfig = px.scatter(penguins, x=\"Culmen Length (mm)\", y=\"Culmen Depth (mm)\", color=\"Species\", title=\"Culmen Length vs Culmen Depth\")\n\n# Calculate the line of best fit\nx_range = np.linspace(penguins[\"Culmen Length (mm)\"].min(), penguins[\"Culmen Length (mm)\"].max(), 100)\ny_range = coef[0][0] * x_range + intercept[0]\n\n# Add the line of best fit to the plot\nfig.add_trace(px.line(x=x_range, y=y_range, name='Line of Best Fit').data[0])\n\nfig.show()\n\n\nfig3 = px.scatter(penguins, x=\"Flipper Length (mm)\", y=\"Body Mass (g)\", color = \"Species\", marginal_x=\"violin\", marginal_y=\"violin\", title=\"Flipper Length vs Body Mass\")\nfig3.show()\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json"
  }
]